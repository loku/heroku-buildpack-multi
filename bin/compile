#!/usr/bin/env bash

set -e

BUILD_DIR=$1
CACHE_DIR=$2

SUPPORT_DIR=$(dirname $0)/../support/

RELEASE_CONFIG=$BUILD_DIR/release_config.yml
BUILD_ENV=$CACHE_DIR/build_env

mkdir -p $BUILD_DIR
mkdir -p $CACHE_DIR

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function with_env() {
  if [ -s $BUILD_ENV ]; then
    env "$(cat $BUILD_ENV)" $*
  else
    env $*
  fi
}

# reset build environment
echo "=====> Resetting build environment"
> $BUILD_ENV

echo "=====> Generating empty release configuration"
echo "--- {}" > $RELEASE_CONFIG

unset GIT_DIR

if [ -f $BUILD_DIR/.build_env ]; then
  echo "=====> Sourcing app's .build_env"
  source $BUILD_DIR/.build_env
fi

for BUILDPACK in $(cat $BUILD_DIR/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"
    git clone $url $dir >/dev/null 2>&1
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    chmod +x $dir/bin/{detect,compile,release}

    framework=$(with_env $dir/bin/detect $BUILD_DIR)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      with_env $dir/bin/compile $BUILD_DIR $CACHE_DIR

      if [ $? != 0 ]; then
        exit 1
      fi

      config=$(with_env $dir/bin/release $BUILD_DIR)

      $SUPPORT_DIR/update_config $RELEASE_CONFIG $BUILD_ENV <<< "${config}"
    fi
  fi
done

echo "Using release configuration from framework $framework:" | indent
cat $RELEASE_CONFIG | indent
